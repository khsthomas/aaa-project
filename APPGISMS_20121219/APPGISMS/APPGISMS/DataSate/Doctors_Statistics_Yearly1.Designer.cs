//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.3615
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace APPGISMS.DataSate {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Doctors_Statistics_Yearly")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Doctors_Statistics_Yearly : global::System.Data.DataSet {
        
        private TB_MD_STATISTICS_REPORTDataTable tableTB_MD_STATISTICS_REPORT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Doctors_Statistics_Yearly() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Doctors_Statistics_Yearly(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TB_MD_STATISTICS_REPORT"] != null)) {
                    base.Tables.Add(new TB_MD_STATISTICS_REPORTDataTable(ds.Tables["TB_MD_STATISTICS_REPORT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TB_MD_STATISTICS_REPORTDataTable TB_MD_STATISTICS_REPORT {
            get {
                return this.tableTB_MD_STATISTICS_REPORT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Doctors_Statistics_Yearly cln = ((Doctors_Statistics_Yearly)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TB_MD_STATISTICS_REPORT"] != null)) {
                    base.Tables.Add(new TB_MD_STATISTICS_REPORTDataTable(ds.Tables["TB_MD_STATISTICS_REPORT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTB_MD_STATISTICS_REPORT = ((TB_MD_STATISTICS_REPORTDataTable)(base.Tables["TB_MD_STATISTICS_REPORT"]));
            if ((initTable == true)) {
                if ((this.tableTB_MD_STATISTICS_REPORT != null)) {
                    this.tableTB_MD_STATISTICS_REPORT.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Doctors_Statistics_Yearly";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Doctors_Statistics_Yearly.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTB_MD_STATISTICS_REPORT = new TB_MD_STATISTICS_REPORTDataTable();
            base.Tables.Add(this.tableTB_MD_STATISTICS_REPORT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTB_MD_STATISTICS_REPORT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Doctors_Statistics_Yearly ds = new Doctors_Statistics_Yearly();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TB_MD_STATISTICS_REPORTRowChangeEventHandler(object sender, TB_MD_STATISTICS_REPORTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TB_MD_STATISTICS_REPORTDataTable : global::System.Data.TypedTableBase<TB_MD_STATISTICS_REPORTRow> {
            
            private global::System.Data.DataColumn columnCOUNTY_VARSION;
            
            private global::System.Data.DataColumn columnCOUNTY_AREA;
            
            private global::System.Data.DataColumn columnCOUNTY_NO;
            
            private global::System.Data.DataColumn columnCOUNTY_NAME;
            
            private global::System.Data.DataColumn columnTOWN_NO;
            
            private global::System.Data.DataColumn columnTOWN_NAME;
            
            private global::System.Data.DataColumn columnT_NUM;
            
            private global::System.Data.DataColumn columnC_NUM;
            
            private global::System.Data.DataColumn columnNUM;
            
            private global::System.Data.DataColumn columnT_RATE;
            
            private global::System.Data.DataColumn columnC_RTAE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_MD_STATISTICS_REPORTDataTable() {
                this.TableName = "TB_MD_STATISTICS_REPORT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TB_MD_STATISTICS_REPORTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TB_MD_STATISTICS_REPORTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTY_VARSIONColumn {
                get {
                    return this.columnCOUNTY_VARSION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTY_AREAColumn {
                get {
                    return this.columnCOUNTY_AREA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTY_NOColumn {
                get {
                    return this.columnCOUNTY_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTY_NAMEColumn {
                get {
                    return this.columnCOUNTY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOWN_NOColumn {
                get {
                    return this.columnTOWN_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOWN_NAMEColumn {
                get {
                    return this.columnTOWN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_NUMColumn {
                get {
                    return this.columnT_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_NUMColumn {
                get {
                    return this.columnC_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMColumn {
                get {
                    return this.columnNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_RATEColumn {
                get {
                    return this.columnT_RATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_RTAEColumn {
                get {
                    return this.columnC_RTAE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_MD_STATISTICS_REPORTRow this[int index] {
                get {
                    return ((TB_MD_STATISTICS_REPORTRow)(this.Rows[index]));
                }
            }
            
            public event TB_MD_STATISTICS_REPORTRowChangeEventHandler TB_MD_STATISTICS_REPORTRowChanging;
            
            public event TB_MD_STATISTICS_REPORTRowChangeEventHandler TB_MD_STATISTICS_REPORTRowChanged;
            
            public event TB_MD_STATISTICS_REPORTRowChangeEventHandler TB_MD_STATISTICS_REPORTRowDeleting;
            
            public event TB_MD_STATISTICS_REPORTRowChangeEventHandler TB_MD_STATISTICS_REPORTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTB_MD_STATISTICS_REPORTRow(TB_MD_STATISTICS_REPORTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_MD_STATISTICS_REPORTRow AddTB_MD_STATISTICS_REPORTRow(string COUNTY_VARSION, string COUNTY_AREA, string COUNTY_NO, string COUNTY_NAME, string TOWN_NO, string TOWN_NAME, string T_NUM, string C_NUM, string NUM, string T_RATE, string C_RTAE) {
                TB_MD_STATISTICS_REPORTRow rowTB_MD_STATISTICS_REPORTRow = ((TB_MD_STATISTICS_REPORTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        COUNTY_VARSION,
                        COUNTY_AREA,
                        COUNTY_NO,
                        COUNTY_NAME,
                        TOWN_NO,
                        TOWN_NAME,
                        T_NUM,
                        C_NUM,
                        NUM,
                        T_RATE,
                        C_RTAE};
                rowTB_MD_STATISTICS_REPORTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTB_MD_STATISTICS_REPORTRow);
                return rowTB_MD_STATISTICS_REPORTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TB_MD_STATISTICS_REPORTDataTable cln = ((TB_MD_STATISTICS_REPORTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TB_MD_STATISTICS_REPORTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOUNTY_VARSION = base.Columns["COUNTY_VARSION"];
                this.columnCOUNTY_AREA = base.Columns["COUNTY_AREA"];
                this.columnCOUNTY_NO = base.Columns["COUNTY_NO"];
                this.columnCOUNTY_NAME = base.Columns["COUNTY_NAME"];
                this.columnTOWN_NO = base.Columns["TOWN_NO"];
                this.columnTOWN_NAME = base.Columns["TOWN_NAME"];
                this.columnT_NUM = base.Columns["T_NUM"];
                this.columnC_NUM = base.Columns["C_NUM"];
                this.columnNUM = base.Columns["NUM"];
                this.columnT_RATE = base.Columns["T_RATE"];
                this.columnC_RTAE = base.Columns["C_RTAE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOUNTY_VARSION = new global::System.Data.DataColumn("COUNTY_VARSION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTY_VARSION);
                this.columnCOUNTY_AREA = new global::System.Data.DataColumn("COUNTY_AREA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTY_AREA);
                this.columnCOUNTY_NO = new global::System.Data.DataColumn("COUNTY_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTY_NO);
                this.columnCOUNTY_NAME = new global::System.Data.DataColumn("COUNTY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTY_NAME);
                this.columnTOWN_NO = new global::System.Data.DataColumn("TOWN_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOWN_NO);
                this.columnTOWN_NAME = new global::System.Data.DataColumn("TOWN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOWN_NAME);
                this.columnT_NUM = new global::System.Data.DataColumn("T_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_NUM);
                this.columnC_NUM = new global::System.Data.DataColumn("C_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_NUM);
                this.columnNUM = new global::System.Data.DataColumn("NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUM);
                this.columnT_RATE = new global::System.Data.DataColumn("T_RATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_RATE);
                this.columnC_RTAE = new global::System.Data.DataColumn("C_RTAE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_RTAE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_MD_STATISTICS_REPORTRow NewTB_MD_STATISTICS_REPORTRow() {
                return ((TB_MD_STATISTICS_REPORTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TB_MD_STATISTICS_REPORTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TB_MD_STATISTICS_REPORTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TB_MD_STATISTICS_REPORTRowChanged != null)) {
                    this.TB_MD_STATISTICS_REPORTRowChanged(this, new TB_MD_STATISTICS_REPORTRowChangeEvent(((TB_MD_STATISTICS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TB_MD_STATISTICS_REPORTRowChanging != null)) {
                    this.TB_MD_STATISTICS_REPORTRowChanging(this, new TB_MD_STATISTICS_REPORTRowChangeEvent(((TB_MD_STATISTICS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TB_MD_STATISTICS_REPORTRowDeleted != null)) {
                    this.TB_MD_STATISTICS_REPORTRowDeleted(this, new TB_MD_STATISTICS_REPORTRowChangeEvent(((TB_MD_STATISTICS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TB_MD_STATISTICS_REPORTRowDeleting != null)) {
                    this.TB_MD_STATISTICS_REPORTRowDeleting(this, new TB_MD_STATISTICS_REPORTRowChangeEvent(((TB_MD_STATISTICS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTB_MD_STATISTICS_REPORTRow(TB_MD_STATISTICS_REPORTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Doctors_Statistics_Yearly ds = new Doctors_Statistics_Yearly();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TB_MD_STATISTICS_REPORTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TB_MD_STATISTICS_REPORTRow : global::System.Data.DataRow {
            
            private TB_MD_STATISTICS_REPORTDataTable tableTB_MD_STATISTICS_REPORT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TB_MD_STATISTICS_REPORTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTB_MD_STATISTICS_REPORT = ((TB_MD_STATISTICS_REPORTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTY_VARSION {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_VARSIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'COUNTY_VARSION\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_VARSIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTY_AREA {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_AREAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'COUNTY_AREA\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_AREAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTY_NO {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'COUNTY_NO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTY_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'COUNTY_NAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOWN_NO {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.TOWN_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'TOWN_NO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.TOWN_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOWN_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.TOWN_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'TOWN_NAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.TOWN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_NUM {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.T_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'T_NUM\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.T_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_NUM {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.C_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'C_NUM\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.C_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUM {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'NUM\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_RATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.T_RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'T_RATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.T_RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_RTAE {
                get {
                    try {
                        return ((string)(this[this.tableTB_MD_STATISTICS_REPORT.C_RTAEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TB_MD_STATISTICS_REPORT\' 中資料行 \'C_RTAE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTB_MD_STATISTICS_REPORT.C_RTAEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTY_VARSIONNull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.COUNTY_VARSIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTY_VARSIONNull() {
                this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_VARSIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTY_AREANull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.COUNTY_AREAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTY_AREANull() {
                this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_AREAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTY_NONull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.COUNTY_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTY_NONull() {
                this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTY_NAMENull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.COUNTY_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTY_NAMENull() {
                this[this.tableTB_MD_STATISTICS_REPORT.COUNTY_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOWN_NONull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.TOWN_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOWN_NONull() {
                this[this.tableTB_MD_STATISTICS_REPORT.TOWN_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOWN_NAMENull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.TOWN_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOWN_NAMENull() {
                this[this.tableTB_MD_STATISTICS_REPORT.TOWN_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_NUMNull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.T_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_NUMNull() {
                this[this.tableTB_MD_STATISTICS_REPORT.T_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_NUMNull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.C_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_NUMNull() {
                this[this.tableTB_MD_STATISTICS_REPORT.C_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMNull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMNull() {
                this[this.tableTB_MD_STATISTICS_REPORT.NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_RATENull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.T_RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_RATENull() {
                this[this.tableTB_MD_STATISTICS_REPORT.T_RATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_RTAENull() {
                return this.IsNull(this.tableTB_MD_STATISTICS_REPORT.C_RTAEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_RTAENull() {
                this[this.tableTB_MD_STATISTICS_REPORT.C_RTAEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TB_MD_STATISTICS_REPORTRowChangeEvent : global::System.EventArgs {
            
            private TB_MD_STATISTICS_REPORTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_MD_STATISTICS_REPORTRowChangeEvent(TB_MD_STATISTICS_REPORTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_MD_STATISTICS_REPORTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591